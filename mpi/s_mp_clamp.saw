let {{
  s_mp_clamp : {n} (fin n, n >= 1) => [n][64] -> [32]
  s_mp_clamp xs = (ys ! 0).1
      where ys = [(1, 1)] # [ next x i j | x <- tail xs | (i, j) <- ys ]
            next x i j = (i + 1, if x > 0 then i + 1 else j)
}};

llvm_verify m "s_mp_clamp" [] do {
  llvm_ptr "mp" (llvm_struct "struct.mp_int");
  sign <- llvm_var "mp->0" (llvm_int 32);
  alloc <- llvm_var "mp->1" (llvm_int 32);
  used <- llvm_var "mp->2" (llvm_int 32);
  llvm_ptr "mp->3" (llvm_array 7 (llvm_int 64));
  dp <- llvm_var "*(mp->3)" (llvm_array 7 (llvm_int 64));

  llvm_assert {{ sign < 2 }};
  llvm_assert_eq "mp->1" {{ 7:[32] }}; /* alloc */
  llvm_assert_eq "mp->2" {{ 7:[32] }}; /* used */

  llvm_ensure_eq "mp->2" {{ s_mp_clamp dp }}; /* used */

  llvm_sat_branches true;
  llvm_verify_tactic abc;
};
