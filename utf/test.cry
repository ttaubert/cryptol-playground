/*increment : [8] -> [8]
increment x = x + 1

twoPlusXY : ([8], [8]) -> [8]
twoPlusXY (x, y) = 2 + xy
    where xy = x * y

//f x = x + 1
//f' x = f 2 * x

test : {n} (fin n) => String n -> String n
test msg = msg <<< 3

caesar : {n} (fin n) => ([8], String n) -> String n
caesar (s, msg) = [ shift x | x <- msg ]
    where map     = ['a' .. 'z'] <<< s
          shift c = map @ (c - 'a')

dCaesar : {n} (fin n) => ([8], String n) -> String n
dCaesar (s, msg) = [ shift x | x <- msg ]
    where map     = ['a' .. 'z'] >>> s
          shift c = map @ (c - 'a')

dCaesar' (s, msg) = caesar (26 - s, msg)*/


/********************************************************/


//is_surrogate : [16] -> Bit
//is_surrogate x = (x && 0xf800) == 0xd800

//is_hi_surrogate : [16] -> Bit
//is_hi_surrogate x = (x && 0xfc00) == 0xd800

//is_lo_surrogate : [16] -> Bit
//is_lo_surrogate x = (x && 0xfc00) == 0xdc00

all : {n, a} (fin n) => (a -> Bit) -> [n]a -> Bit
all f xs = ys ! 0 where ys = [True] # [ f x && y | x <- xs | y <- ys ]

pairs xs = [ (x, y) | x <- take`{back=1} xs | y <- drop`{1} xs ]

//is_valid_pair (x, y) = is_hi_surrogate x == is_lo_surrogate y

//check_surrogates xs = all is_valid_pair (pairs ([zero] # xs) # [zero])

//filter : {n,m,a} (fin n) => (a -> Bit) -> [n]a -> [m]a
//filter f xs = drop`{1} xs

//flat_map xs = ys ! 0
    //where ys = [[0,0]] # [ y # x | x <- xs | y <- ys ]


/*test1 : {n} (fin n) => [n][16] -> [inf][16]
test1 xs = ys
    where ys = xs # [ y + 1 | y <- ys ]

test2 : {n} (fin n) => [n][16] -> [inf][16]
test2 xs = ys
    where ys = [1] # [ y * x | x <- (xs # [0 ...]) | y <- ys ]*/


/********************************************************/


sum xs = ys ! 0
    where ys = [0] # [ x + y | x <- xs | y <- ys ]

utf16_to_utf8_len : {n} (fin n) => [n][16] -> [32]
utf16_to_utf8_len bytes = sum [ cp_len x | x <- bytes ]
    where cp_len x = if x < 0x0080 then 1
                      | x < 0x0800 then 2
                      | x >= 0xd800 && x <= 0xdfff then 4
                                   else 3

//utf16_to_utf8 : {n} (fin n) => [n][16] -> [n][16]
//utf16_to_utf8 xs = [ if x % 2 then [] else [] ]

/*utf16_to_utf8 : {n} (fin n) => [n][16] -> [inf][16]
utf16_to_utf8 xs = [] # [ r @ 0 | r <- ret ]
    where foo = [ r | r <- ret ]
    where xsz = xs # [0 ...]
          ret = [ conv (x, y) | x <- xsz | y <- drop`{1} xsz ]
          conv (x, y) = if x < 0x0080 then x // 1 byte
                         | x < 0x0800 then x // 2 bytes
                         | is_hi_surrogate x != is_lo_surrogate y then error "foobar"
                         | is_hi_surrogate x then x // x bytes?
                         else x // x bytes?*/

/*utf16_to_utf8 : {n} (fin n) => [n][16] -> [inf][16]
utf16_to_utf8 xs = if width xs > 0 then ([12345] # utf16_to_utf8 xs) else [0 ...]
    //where conv x = if x % 2 == 0 then [1,2] else [1,2,3]*/


/********************************************************/

head : {n, a} (n >= 1) => [n]a -> a
head xs = xs @ 0

tail : {m, n, a} (m == 1, n >= 0) => [m + n]a -> [n]a
tail xs = drop`{1} xs

test1 : {n} (fin n) => [n][16] -> [inf][16]
test1 xs = xs # [0 ...]

test2 : {n} (fin n, n >= 1) => [n][16] -> [inf][16]
test2 xs = (drop`{1} xs) # [0 ...]

test3 : {n} (fin n, n >= 1) => [n][16] -> [inf][16]
test3 xs = ([head xs] # (tail xs)) # [0 ...]

test4 : {n} (fin n, n >= 1) => [n][16] -> [inf][16]
test4 xs = (conv (head xs) # (tail xs)) # [0 ...]
    where conv x = [0x1234, 0x5678]

//test5 : {n} (fin n, n >= 1) => [n][16] -> [inf][16]
//test5 xs = ((if (head xs) % 2 == 0 then [0x1234, 0x5678] else [0x1256]) # (tail xs)) # [0 ...]

//test5 : {n} (fin n, n >= 1) => ([8], [n][8]) -> [8]
//test5 (i, xs) = ys ! 0
    //where ys = [i] # [ y - 3 | x <- [0 .. i] | y <- ys ]

test6 : ([16], [16]) -> [3]
test6 (x, y) = if x < 0x0080 then 1
                | x < 0x0800 then 2
                | is_hi_surrogate x != is_lo_surrogate y then error "foobar"
                | is_hi_surrogate x then 4 else 3
