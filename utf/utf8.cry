is_hi_surrogate x = (x && 0xfc00) == 0xd800
is_lo_surrogate x = (x && 0xfc00) == 0xdc00

test7 ((b, (i, j)), xs) = (bytes @ j, next_ij)
    where pair = (xs @ i, xs @ (i + 1))
          (len, bytes) = test8 pair
          step_i = if len == 4 then 2 else 1
          next_ij = if j < len - 1 then (i, j + 1) else (i + step_i, 0)

// TODO detect lo surrogate at the beginning

test8 (x, y) = if x < 0x0080 then (1, utf16_to_utf8_1 x)
    | x < 0x0800 then (2, utf16_to_utf8_2 x)
    | is_hi_surrogate x != is_lo_surrogate y then error "bad encoding"
    | is_hi_surrogate x then (4, utf16_to_utf8_4 (x, y))
      else (3, utf16_to_utf8_3 x)

utf16_to_utf8_1 x = [lsb && 0x7f, 0, 0, 0]
    where lsb = drop`{8} x

utf16_to_utf8_2 x = [a, b, 0, 0]
    where a = 0xc0 || ((msb && 0x07) << 2) || ((lsb && 0xc0) >> 6)
          b = 0x80 || (lsb && 0x3f)
          lsb = drop`{8} x
          msb = take`{8} x

utf16_to_utf8_3 x = [a, b, c, 0]
    where a = 0xe0 || ((msb && 0xf0) >> 4)
          b = 0x80 || ((msb && 0x0f) << 2) || ((lsb && 0xc0) >> 6)
          c = 0x80 || (lsb && 0x3f)
          lsb = drop`{8} x
          msb = take`{8} x

utf16_to_utf8_4 : ([16], [16]) -> [4][8]
utf16_to_utf8_4 (x, y) = [a, b, c, d]
    where abcde = 1 + (((msb_x && 0x03) << 2) || ((lsb_x && 0xc0) >> 6))
          a = 0xf0 || ((abcde && 0x1c) >> 2)
          b = 0x80 || ((abcde && 0x03) << 4) || ((lsb_x && 0x3c) >> 2)
          c = 0x80 || ((lsb_x && 0x03) << 4) || ((msb_y && 0x03) << 2) || ((lsb_y && 0xC0) >> 6)
          d = 0x80 || (lsb_y && 0x3f)
          lsb_x = drop`{8} x
          lsb_y = drop`{8} y
          msb_x = take`{8} x
          msb_y = take`{8} y

utf16_to_utf8 : {n} (fin n, n >= 1) => [n][16] -> [inf][8]
utf16_to_utf8 xs = drop`{1} [ y.0 | y <- ys ]
    where ys = [init] # [ test7 (state, xs # [0, 0 ...]) | state <- ys ]
          init = (0, (0:[32], 0:[3]))

property vectors1 = [ f v == [drop`{8} v, 0, 0, 0, 0] | v <- vs ] == ~zero
    where f x = take`{5}(utf16_to_utf8 [x])
          vs = [0x0001, 0x0002, 0x0003, 0x0004, 0x0007, 0x0008, 0x0009,
                0x000f, 0x0010, 0x001f, 0x0020, 0x003f, 0x0040, 0x007f]

property vectors2 = [ f v == e # [0, 0, 0] | (v, e) <- vs ] == ~zero
    where f x = take`{5}(utf16_to_utf8 [x])
          vs = [(0x0080, [0xc2, 0x80]),
                (0x0081, [0xc2, 0x81]),
                (0x0082, [0xc2, 0x82]),
                (0x0084, [0xc2, 0x84]),
                (0x0088, [0xc2, 0x88]),
                (0x0090, [0xc2, 0x90]),
                (0x00a0, [0xc2, 0xa0]),
                (0x00c0, [0xc3, 0x80]),
                (0x00ff, [0xc3, 0xbf]),
                (0x0100, [0xc4, 0x80]),
                (0x0101, [0xc4, 0x81]),
                (0x0102, [0xc4, 0x82]),
                (0x0104, [0xc4, 0x84]),
                (0x0108, [0xc4, 0x88]),
                (0x0110, [0xc4, 0x90]),
                (0x0120, [0xc4, 0xa0]),
                (0x0140, [0xc5, 0x80]),
                (0x0180, [0xc6, 0x80]),
                (0x01ff, [0xc7, 0xbf]),
                (0x0200, [0xc8, 0x80]),
                (0x0201, [0xc8, 0x81]),
                (0x0202, [0xc8, 0x82]),
                (0x0204, [0xc8, 0x84]),
                (0x0208, [0xc8, 0x88]),
                (0x0210, [0xc8, 0x90]),
                (0x0220, [0xc8, 0xa0]),
                (0x0240, [0xc9, 0x80]),
                (0x0280, [0xca, 0x80]),
                (0x0300, [0xcc, 0x80]),
                (0x03ff, [0xcf, 0xbf]),
                (0x0400, [0xd0, 0x80]),
                (0x0401, [0xd0, 0x81]),
                (0x0402, [0xd0, 0x82]),
                (0x0404, [0xd0, 0x84]),
                (0x0408, [0xd0, 0x88]),
                (0x0410, [0xd0, 0x90]),
                (0x0420, [0xd0, 0xa0]),
                (0x0440, [0xd1, 0x80]),
                (0x0480, [0xd2, 0x80]),
                (0x0500, [0xd4, 0x80]),
                (0x0600, [0xd8, 0x80]),
                (0x07ff, [0xdf, 0xbf])]

property vectors3 = [ f v == e # [0, 0] | (v, e) <- vs ] == ~zero
    where f x = take`{5}(utf16_to_utf8 [x])
          vs = [(0x0800, [0xe0, 0xa0, 0x80]),
                (0x0801, [0xe0, 0xa0, 0x81]),
                (0x0802, [0xe0, 0xa0, 0x82]),
                (0x0804, [0xe0, 0xa0, 0x84]),
                (0x0808, [0xe0, 0xa0, 0x88]),
                (0x0810, [0xe0, 0xa0, 0x90]),
                (0x0820, [0xe0, 0xa0, 0xa0]),
                (0x0840, [0xe0, 0xa1, 0x80]),
                (0x0880, [0xe0, 0xa2, 0x80]),
                (0x0900, [0xe0, 0xa4, 0x80]),
                (0x0a00, [0xe0, 0xa8, 0x80]),
                (0x0c00, [0xe0, 0xb0, 0x80]),
                (0x0fff, [0xe0, 0xbf, 0xbf]),
                (0x1000, [0xe1, 0x80, 0x80]),
                (0x1001, [0xe1, 0x80, 0x81]),
                (0x1002, [0xe1, 0x80, 0x82]),
                (0x1004, [0xe1, 0x80, 0x84]),
                (0x1008, [0xe1, 0x80, 0x88]),
                (0x1010, [0xe1, 0x80, 0x90]),
                (0x1020, [0xe1, 0x80, 0xa0]),
                (0x1040, [0xe1, 0x81, 0x80]),
                (0x1080, [0xe1, 0x82, 0x80]),
                (0x1100, [0xe1, 0x84, 0x80]),
                (0x1200, [0xe1, 0x88, 0x80]),
                (0x1400, [0xe1, 0x90, 0x80]),
                (0x1800, [0xe1, 0xa0, 0x80]),
                (0x1fff, [0xe1, 0xbf, 0xbf]),
                (0x2000, [0xe2, 0x80, 0x80]),
                (0x2001, [0xe2, 0x80, 0x81]),
                (0x2002, [0xe2, 0x80, 0x82]),
                (0x2004, [0xe2, 0x80, 0x84]),
                (0x2008, [0xe2, 0x80, 0x88]),
                (0x2010, [0xe2, 0x80, 0x90]),
                (0x2020, [0xe2, 0x80, 0xa0]),
                (0x2040, [0xe2, 0x81, 0x80]),
                (0x2080, [0xe2, 0x82, 0x80]),
                (0x2100, [0xe2, 0x84, 0x80]),
                (0x2200, [0xe2, 0x88, 0x80]),
                (0x2400, [0xe2, 0x90, 0x80]),
                (0x2800, [0xe2, 0xa0, 0x80]),
                (0x3000, [0xe3, 0x80, 0x80]),
                (0x3fff, [0xe3, 0xbf, 0xbf]),
                (0x4000, [0xe4, 0x80, 0x80]),
                (0x4001, [0xe4, 0x80, 0x81]),
                (0x4002, [0xe4, 0x80, 0x82]),
                (0x4004, [0xe4, 0x80, 0x84]),
                (0x4008, [0xe4, 0x80, 0x88]),
                (0x4010, [0xe4, 0x80, 0x90]),
                (0x4020, [0xe4, 0x80, 0xa0]),
                (0x4040, [0xe4, 0x81, 0x80]),
                (0x4080, [0xe4, 0x82, 0x80]),
                (0x4100, [0xe4, 0x84, 0x80]),
                (0x4200, [0xe4, 0x88, 0x80]),
                (0x4400, [0xe4, 0x90, 0x80]),
                (0x4800, [0xe4, 0xa0, 0x80]),
                (0x5000, [0xe5, 0x80, 0x80]),
                (0x6000, [0xe6, 0x80, 0x80]),
                (0x7fff, [0xe7, 0xbf, 0xbf]),
                (0x8000, [0xe8, 0x80, 0x80]),
                (0x8001, [0xe8, 0x80, 0x81]),
                (0x8002, [0xe8, 0x80, 0x82]),
                (0x8004, [0xe8, 0x80, 0x84]),
                (0x8008, [0xe8, 0x80, 0x88]),
                (0x8010, [0xe8, 0x80, 0x90]),
                (0x8020, [0xe8, 0x80, 0xa0]),
                (0x8040, [0xe8, 0x81, 0x80]),
                (0x8080, [0xe8, 0x82, 0x80]),
                (0x8100, [0xe8, 0x84, 0x80]),
                (0x8200, [0xe8, 0x88, 0x80]),
                (0x8400, [0xe8, 0x90, 0x80]),
                (0x8800, [0xe8, 0xa0, 0x80]),
                (0x9000, [0xe9, 0x80, 0x80]),
                (0xa000, [0xea, 0x80, 0x80]),
                (0xc000, [0xec, 0x80, 0x80]),
                (0xffff, [0xef, 0xbf, 0xbf])]
