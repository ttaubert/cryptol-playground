m <- llvm_load_module "bmul32.bc";

bmul32_ret <- llvm_extract m "bmul32_ret" llvm_pure;

let {{
  pad x = zero # x

  m0 x = x && 0x1111111111111111
  m1 x = x && 0x2222222222222222
  m2 x = x && 0x4444444444444444
  m3 x = x && 0x8888888888888888

  pmul : [32] -> [32] -> [64]
  pmul a b = pad (pmult a b)
}};

let simpset x = addsimps x empty_ss;

p0 <- time (prove_print abc {{ \x y -> m0 (pmul x y) == m0 (bmul32_ret x y) }});
p1 <- time (prove_print abc {{ \x y -> m1 (pmul x y) == m1 (bmul32_ret x y) }});
p2 <- time (prove_print abc {{ \x y -> m2 (pmul x y) == m2 (bmul32_ret x y) }});
p3 <- time (prove_print abc {{ \x y -> m3 (pmul x y) == m3 (bmul32_ret x y) }});

let ss = simpset [p0, p1, p2, p3];
m0 <- time (prove_print do { simplify ss; abc; } {{ \x y -> ((m0 (bmul32_ret x y)) || (m1 (bmul32_ret x y)) || (m2 (bmul32_ret x y)) || (m3 (bmul32_ret x y))) ==
                                                            ((m0 (pmul x y))       || (m1 (pmul x y))       || (m2 (pmul x y))       || (m3 (pmul x y))) }});

i0 <- time (prove_print abc {{ \x y -> bmul32_ret x y == ((m0 (bmul32_ret x y)) || (m1 (bmul32_ret x y)) || (m2 (bmul32_ret x y)) || (m3 (bmul32_ret x y))) }});
i1 <- time (prove_print abc {{ \x y -> pmul x y == ((m0 (pmul x y)) || (m1 (pmul x y)) || (m2 (pmul x y)) || (m3 (pmul x y))) }});

let ss2 = simpset [i0, i1, m0];
k1 <- time (prove_print do { simplify ss2; abc; } {{ \x y -> pmul x y == ((m0 (bmul32_ret x y)) || (m1 (bmul32_ret x y)) || (m2 (bmul32_ret x y)) || (m3 (bmul32_ret x y))) }});


//i0 <- time (prove_print abc {{ \x y -> bmul32_ret x y == ((m0 (bmul32_ret x y)) || (m1 (bmul32_ret x y)) || (m2 (bmul32_ret x y)) || (m3 (bmul32_ret x y))) }});
//i1 <- time (prove_print abc {{ \x y -> pmul x y == ((m0 (pmul x y)) || (m1 (pmul x y)) || (m2 (pmul x y)) || (m3 (pmul x y))) }});

//i0 <- time (prove_print abc {{ \x y -> ((m0 (bmul32_ret x y)) || (m1 (bmul32_ret x y)) || (m2 (bmul32_ret x y)) || (m3 (bmul32_ret x y))) == bmul32_ret x y }});
//i1 <- time (prove_print abc {{ \x y -> ((m0 (pmul x y)) || (m1 (pmul x y)) || (m2 (pmul x y)) || (m3 (pmul x y))) == pmul x y }});

//let ss2 = simpset [i1, m0];
//time (prove_print do { simplify ss2; abc; } {{ \x y -> bmul32_ret x y == pmul x y }});
